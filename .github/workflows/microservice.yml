name: Deploy to AKS

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      VERSION: ${{ github.sha }}
      CONTAINER_REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
      REGISTRY_UN: ${{ secrets.REGISTRY_UN }}
      REGISTRY_PW: ${{ secrets.REGISTRY_PW }}

    steps:
      # Checkout the code
      - uses: actions/checkout@v3
      - name: Login to ACR
        run: |
          echo ${{ secrets.CLIENT_SECRET }} | docker login ${{ env.CONTAINER_REGISTRY }}.azurecr.io -u ${{ secrets.CLIENT_ID }} --password-stdin
 
      - name: Getting AKS credentials
        run: |
          az aks get-credentials --resource-group sit722week92D9 --name sit722week92D9 --overwrite-existing

      - name: Attach ACR to AKS
        run: az aks update -n sit722week92D9 -g sit722week92D9 --attach-acr sit722week92D9
        
      # Make the build-image.sh script executable
      - name: Make build-image.sh executable
        run: chmod +x ./scripts/build-image.sh

      # Make the push-image.sh script executable
      - name: Make push-image.sh executable
        run: chmod +x ./scripts/push-image.sh

      # Make the deploy.sh script executable
      - name: Make deploy.sh executable
        run: chmod +x ./scripts/deploy.sh

      # Build Docker images
      - name: Build Docker Image
        run: ./scripts/build-image.sh

      # Push Docker images to ACR
      - name: Push Docker Image
        run: ./scripts/push-image.sh

      # Set up kubectl (use a specific version and base64-encoded Kubeconfig)
      - uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}
          kubectl-version: v1.30.2

      # Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: ./scripts/deploy.sh

      # Get the status of deployments
      - name: Get Deployments Status
        run: kubectl get deployments -o wide

      # Get the status of pods
      - name: Get Pods Status
        run: kubectl get pods -o wide

      # Get the status of services
      - name: Get Services Status
        run: kubectl get services -o wide
